


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ;    FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engi
                       neers Ltd.
    3 00000000         ;
    4 00000000         ;    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USI
                       NG THE LATEST VERSION.
    5 00000000         ;
    6 00000000         ;    ***************************************************
                       ************************
    7 00000000         ;     *                                                 
                                             *
    8 00000000         ;     *    FreeRTOS provides completely free yet profess
                       ionally developed,    *
    9 00000000         ;     *    robust, strictly quality controlled, supporte
                       d, and cross          *
   10 00000000         ;     *    platform software that has become a de facto 
                       standard.             *
   11 00000000         ;     *                                                 
                                             *
   12 00000000         ;     *    Help yourself get started quickly and support
                        the FreeRTOS         *
   13 00000000         ;     *    project by purchasing a FreeRTOS tutorial boo
                       k, reference          *
   14 00000000         ;     *    manual, or both from: http://www.FreeRTOS.org
                       /Documentation        *
   15 00000000         ;     *                                                 
                                             *
   16 00000000         ;     *    Thank you!                                   
                                             *
   17 00000000         ;     *                                                 
                                             *
   18 00000000         ;    ***************************************************
                       ************************
   19 00000000         ;
   20 00000000         ;    This file is part of the FreeRTOS distribution.
   21 00000000         ;
   22 00000000         ;    FreeRTOS is free software; you can redistribute it 
                       and/or modify it under
   23 00000000         ;    the terms of the GNU General Public License (versio
                       n 2) as published by the
   24 00000000         ;    Free Software Foundation >>>> AND MODIFIED BY <<<< 
                       the FreeRTOS exception.
   25 00000000         ;
   26 00000000         ;    >>! NOTE: The modification to the GPL is included t
                       o allow you to distribute
   27 00000000         ;    >>! a combined work that includes FreeRTOS without 
                       being obliged to provide
   28 00000000         ;    >>! the source code for proprietary components outs
                       ide of the FreeRTOS
   29 00000000         ;    >>! kernel.
   30 00000000         ;
   31 00000000         ;    FreeRTOS is distributed in the hope that it will be
                        useful, but WITHOUT ANY
   32 00000000         ;    WARRANTY; without even the implied warranty of MERC
                       HANTABILITY or FITNESS
   33 00000000         ;    FOR A PARTICULAR PURPOSE.  Full license text is ava
                       ilable from the following
   34 00000000         ;    link: http://www.freertos.org/a00114.html
   35 00000000         ;



ARM Macro Assembler    Page 2 


   36 00000000         ;    1 tab == 4 spaces!
   37 00000000         ;
   38 00000000         ;    ***************************************************
                       ************************
   39 00000000         ;     *                                                 
                                             *
   40 00000000         ;     *    Having a problem?  Start by reading the FAQ "
                       My application does   *
   41 00000000         ;     *    not run, what could be wrong?"               
                                             *
   42 00000000         ;     *                                                 
                                             *
   43 00000000         ;     *    http://www.FreeRTOS.org/FAQHelp.html         
                                             *
   44 00000000         ;     *                                                 
                                             *
   45 00000000         ;    ***************************************************
                       ************************
   46 00000000         ;
   47 00000000         ;    http://www.FreeRTOS.org - Documentation, books, tra
                       ining, latest versions,
   48 00000000         ;    license and Real Time Engineers Ltd. contact detail
                       s.
   49 00000000         ;
   50 00000000         ;    http://www.FreeRTOS.org/plus - A selection of FreeR
                       TOS ecosystem products,
   51 00000000         ;    including FreeRTOS+Trace - an indispensable product
                       ivity tool, a DOS
   52 00000000         ;    compatible FAT file system, and our tiny thread awa
                       re UDP/IP stack.
   53 00000000         ;
   54 00000000         ;    http://www.OpenRTOS.com - Real Time Engineers ltd l
                       icense FreeRTOS to High
   55 00000000         ;    Integrity Systems to sell under the OpenRTOS brand.
                         Low cost OpenRTOS
   56 00000000         ;    licenses offer ticketed support, indemnification an
                       d middleware.
   57 00000000         ;
   58 00000000         ;    http://www.SafeRTOS.com - High Integrity Systems al
                       so provide a safety
   59 00000000         ;    engineered and independently SIL3 certified version
                        for use in safety and
   60 00000000         ;    mission critical applications that require provable
                        dependability.
   61 00000000         ;
   62 00000000         ;    1 tab == 4 spaces!
   63 00000000         ;*/
   64 00000000         
   65 00000000         ;/* 
   66 00000000         ; * "Reg test" tasks - These fill the registers with kno
                       wn values, then check
   67 00000000         ; * that each register maintains its expected value for 
                       the lifetime of the
   68 00000000         ; * task.  Each task uses a different set of values.  Th
                       e reg test tasks execute
   69 00000000         ; * with a very low priority, so get preempted very freq
                       uently.  A register
   70 00000000         ; * containing an unexpected value is indicative of an e
                       rror in the context



ARM Macro Assembler    Page 3 


   71 00000000         ; * switching mechanism.
   72 00000000         ; */
   73 00000000         
   74 00000000                 PRESERVE8
   75 00000000                 THUMB
   76 00000000         
   77 00000000         
   78 00000000                 IMPORT           ulRegTest1LoopCounter
   79 00000000                 IMPORT           ulRegTest2LoopCounter
   80 00000000         
   81 00000000                 EXPORT           vRegTest1Task
   82 00000000                 EXPORT           vRegTest2Task
   83 00000000         
   84 00000000                 AREA             |.text|, CODE, READONLY
   85 00000000         
   86 00000000         ;/*-----------------------------------------------------
                       ------*/
   87 00000000         vRegTest1Task
                               PROC
   88 00000000         
   89 00000000         ;/* Fill the core registers with known values.  This is 
                       only done once. */
   90 00000000 2165            movs             r1, #101
   91 00000002 2266            movs             r2, #102
   92 00000004 2367            movs             r3, #103
   93 00000006 2468            movs             r4, #104
   94 00000008 2569            movs             r5, #105
   95 0000000A 266A            movs             r6, #106
   96 0000000C 276B            movs             r7, #107
   97 0000000E 206C            movs             r0, #108
   98 00000010 4680            mov              r8, r0
   99 00000012 206D            movs             r0, #109
  100 00000014 4681            mov              r9, r0
  101 00000016 206E            movs             r0, #110
  102 00000018 4682            mov              r10, r0
  103 0000001A 206F            movs             r0, #111
  104 0000001C 4683            mov              r11, r0
  105 0000001E 2070            movs             r0, #112
  106 00000020 4684            mov              r12, r0
  107 00000022 2064            movs             r0, #100
  108 00000024         
  109 00000024         reg1_loop
  110 00000024         ;/* Repeatedly check that each register still contains t
                       he value written to
  111 00000024         ;it when the task started. */
  112 00000024 2864            cmp              r0, #100
  113 00000026 D12A            bne              reg1_error_loop
  114 00000028 2965            cmp              r1, #101
  115 0000002A D128            bne              reg1_error_loop
  116 0000002C 2A66            cmp              r2, #102
  117 0000002E D126            bne              reg1_error_loop
  118 00000030 2B67            cmp              r3, #103
  119 00000032 D124            bne              reg1_error_loop
  120 00000034 2C68            cmp              r4, #104
  121 00000036 D122            bne              reg1_error_loop
  122 00000038 2D69            cmp              r5, #105
  123 0000003A D120            bne              reg1_error_loop
  124 0000003C 2E6A            cmp              r6, #106
  125 0000003E D11E            bne              reg1_error_loop



ARM Macro Assembler    Page 4 


  126 00000040 2F6B            cmp              r7, #107
  127 00000042 D11C            bne              reg1_error_loop
  128 00000044 206C            movs             r0, #108
  129 00000046 4580            cmp              r8, r0
  130 00000048 D119            bne              reg1_error_loop
  131 0000004A 206D            movs             r0, #109
  132 0000004C 4581            cmp              r9, r0
  133 0000004E D116            bne              reg1_error_loop
  134 00000050 206E            movs             r0, #110
  135 00000052 4582            cmp              r10, r0
  136 00000054 D113            bne              reg1_error_loop
  137 00000056 206F            movs             r0, #111
  138 00000058 4583            cmp              r11, r0
  139 0000005A D110            bne              reg1_error_loop
  140 0000005C 2070            movs             r0, #112
  141 0000005E 4584            cmp              r12, r0
  142 00000060 D10D            bne              reg1_error_loop
  143 00000062         
  144 00000062         ;/* Everything passed, increment the loop counter. */
  145 00000062 B402            push             { r1 }
  146 00000064 4824            ldr              r0, =ulRegTest1LoopCounter
  147 00000066 6801            ldr              r1, [r0]
  148 00000068 1C49            adds             r1, r1, #1
  149 0000006A 6001            str              r1, [r0]
  150 0000006C         
  151 0000006C         ;/* Yield to increase test coverage. */
  152 0000006C 2001            movs             r0, #0x01
  153 0000006E 4923            ldr              r1, =0xe000ed04 ; NVIC_INT_CTRL
                                                            
  154 00000070 0700            lsls             r0 ,r0, #28 ; Shift to PendSV b
                                                            it
  155 00000072 6008            str              r0, [r1]
  156 00000074 F3BF 8F4F       dsb
  157 00000078 BC02            pop              { r1 }
  158 0000007A         
  159 0000007A         ;/* Start again. */
  160 0000007A 2064            movs             r0, #100
  161 0000007C         
  162 0000007C E7D2            b                reg1_loop
  163 0000007E         
  164 0000007E         reg1_error_loop
  165 0000007E         ;/* If this line is hit then there was an error in a cor
                       e register value.
  166 0000007E         ;The loop ensures the loop counter stops incrementing. *
                       /
  167 0000007E E7FE            b                reg1_error_loop
  168 00000080 BF00            nop
  169 00000082                 ENDP
  170 00000082         
  171 00000082         
  172 00000082         
  173 00000082         vRegTest2Task
                               PROC
  174 00000082         
  175 00000082         ;/* Fill the core registers with known values.  This is 
                       only done once. */
  176 00000082 2101            movs             r1, #1
  177 00000084 2202            movs             r2, #2
  178 00000086 2303            movs             r3, #3



ARM Macro Assembler    Page 5 


  179 00000088 2404            movs             r4, #4
  180 0000008A 2505            movs             r5, #5
  181 0000008C 2606            movs             r6, #6
  182 0000008E 2707            movs             r7, #7
  183 00000090 2008            movs             r0, #8
  184 00000092 4680            mov              r8, r0
  185 00000094 2009            movs             r0, #9
  186 00000096 4681            mov              r9, r0
  187 00000098 200A            movs             r0, #10
  188 0000009A 4682            mov              r10, r0
  189 0000009C 200B            movs             r0, #11
  190 0000009E 4683            mov              r11, r0
  191 000000A0 200C            movs             r0, #12
  192 000000A2 4684            mov              r12, r0
  193 000000A4 200A            movs             r0, #10
  194 000000A6         
  195 000000A6         reg2_loop
  196 000000A6         ;/* Repeatedly check that each register still contains t
                       he value written to
  197 000000A6         ;it when the task started. */
  198 000000A6 280A            cmp              r0, #10
  199 000000A8 D124            bne              reg2_error_loop
  200 000000AA 2901            cmp              r1, #1
  201 000000AC D122            bne              reg2_error_loop
  202 000000AE 2A02            cmp              r2, #2
  203 000000B0 D120            bne              reg2_error_loop
  204 000000B2 2B03            cmp              r3, #3
  205 000000B4 D11E            bne              reg2_error_loop
  206 000000B6 2C04            cmp              r4, #4
  207 000000B8 D11C            bne              reg2_error_loop
  208 000000BA 2D05            cmp              r5, #5
  209 000000BC D11A            bne              reg2_error_loop
  210 000000BE 2E06            cmp              r6, #6
  211 000000C0 D118            bne              reg2_error_loop
  212 000000C2 2F07            cmp              r7, #7
  213 000000C4 D116            bne              reg2_error_loop
  214 000000C6 2008            movs             r0, #8
  215 000000C8 4580            cmp              r8, r0
  216 000000CA D113            bne              reg2_error_loop
  217 000000CC 2009            movs             r0, #9
  218 000000CE 4581            cmp              r9, r0
  219 000000D0 D110            bne              reg2_error_loop
  220 000000D2 200A            movs             r0, #10
  221 000000D4 4582            cmp              r10, r0
  222 000000D6 D10D            bne              reg2_error_loop
  223 000000D8 200B            movs             r0, #11
  224 000000DA 4583            cmp              r11, r0
  225 000000DC D10A            bne              reg2_error_loop
  226 000000DE 200C            movs             r0, #12
  227 000000E0 4584            cmp              r12, r0
  228 000000E2 D107            bne              reg2_error_loop
  229 000000E4         
  230 000000E4         ;/* Everything passed, increment the loop counter. */
  231 000000E4 B402            push             { r1 }
  232 000000E6 4806            ldr              r0, =ulRegTest2LoopCounter
  233 000000E8 6801            ldr              r1, [r0]
  234 000000EA 1C49            adds             r1, r1, #1
  235 000000EC 6001            str              r1, [r0]
  236 000000EE BC02            pop              { r1 }



ARM Macro Assembler    Page 6 


  237 000000F0         
  238 000000F0         ;/* Start again. */
  239 000000F0 200A            movs             r0, #10
  240 000000F2 E7D8            b                reg2_loop
  241 000000F4         
  242 000000F4         reg2_error_loop
  243 000000F4         ;/* If this line is hit then there was an error in a cor
                       e register value.
  244 000000F4         ;The loop ensures the loop counter stops incrementing. *
                       /
  245 000000F4 E7FE            b                reg2_error_loop
  246 000000F6 BF00            nop
  247 000000F8                 ENDP
  248 000000F8         
  249 000000F8                 END
              00000000 
              E000ED04 
              00000000 
Command Line: --debug --no_warn --xref --diag_suppress=9931 --cpu=8-M.Base --de
pend=.\output\regtest_keil.d -o.\output\regtest_keil.o -I.\RTE\_M2351_UlinkPro 
-IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.2.1\Device\M2351\Include -IC:\Keil_
v5\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VER
SION SETA 524" --list=.\regtest_keil.lst RegTest_Keil.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 84 in file RegTest_Keil.s
   Uses
      None
Comment: .text unused
reg1_error_loop 0000007E

Symbol: reg1_error_loop
   Definitions
      At line 164 in file RegTest_Keil.s
   Uses
      At line 113 in file RegTest_Keil.s
      At line 115 in file RegTest_Keil.s
      At line 117 in file RegTest_Keil.s
      At line 119 in file RegTest_Keil.s
      At line 121 in file RegTest_Keil.s
      At line 123 in file RegTest_Keil.s
      At line 125 in file RegTest_Keil.s
      At line 127 in file RegTest_Keil.s
      At line 130 in file RegTest_Keil.s
      At line 133 in file RegTest_Keil.s
      At line 136 in file RegTest_Keil.s
      At line 139 in file RegTest_Keil.s
      At line 142 in file RegTest_Keil.s
      At line 167 in file RegTest_Keil.s

reg1_loop 00000024

Symbol: reg1_loop
   Definitions
      At line 109 in file RegTest_Keil.s
   Uses
      At line 162 in file RegTest_Keil.s
Comment: reg1_loop used once
reg2_error_loop 000000F4

Symbol: reg2_error_loop
   Definitions
      At line 242 in file RegTest_Keil.s
   Uses
      At line 199 in file RegTest_Keil.s
      At line 201 in file RegTest_Keil.s
      At line 203 in file RegTest_Keil.s
      At line 205 in file RegTest_Keil.s
      At line 207 in file RegTest_Keil.s
      At line 209 in file RegTest_Keil.s
      At line 211 in file RegTest_Keil.s
      At line 213 in file RegTest_Keil.s
      At line 216 in file RegTest_Keil.s
      At line 219 in file RegTest_Keil.s
      At line 222 in file RegTest_Keil.s
      At line 225 in file RegTest_Keil.s
      At line 228 in file RegTest_Keil.s
      At line 245 in file RegTest_Keil.s

reg2_loop 000000A6



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: reg2_loop
   Definitions
      At line 195 in file RegTest_Keil.s
   Uses
      At line 240 in file RegTest_Keil.s
Comment: reg2_loop used once
vRegTest1Task 00000000

Symbol: vRegTest1Task
   Definitions
      At line 87 in file RegTest_Keil.s
   Uses
      At line 81 in file RegTest_Keil.s
Comment: vRegTest1Task used once
vRegTest2Task 00000082

Symbol: vRegTest2Task
   Definitions
      At line 173 in file RegTest_Keil.s
   Uses
      At line 82 in file RegTest_Keil.s
Comment: vRegTest2Task used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ulRegTest1LoopCounter 00000000

Symbol: ulRegTest1LoopCounter
   Definitions
      At line 78 in file RegTest_Keil.s
   Uses
      At line 146 in file RegTest_Keil.s
Comment: ulRegTest1LoopCounter used once
ulRegTest2LoopCounter 00000000

Symbol: ulRegTest2LoopCounter
   Definitions
      At line 79 in file RegTest_Keil.s
   Uses
      At line 232 in file RegTest_Keil.s
Comment: ulRegTest2LoopCounter used once
2 symbols
343 symbols in table
